############# WORK IN PROGRESS ###############

import time
import random

import os
import re

import subprocess
from subprocess import call

from termcolor import colored

DN = open(os.devnull, 'w')

print(colored("\n\n\n#                  #   ######    ######          #      #   ########       #       #      #   ########   #       #", 'red', attrs=['blink']),
      colored("\n #                #    #     #  #      #         #     #    #       #     # #      #     #    #          # #     #", 'red', attrs=['blink']),
      colored("\n  #              #     #     #  ##               #    #     #       #    #   #     #    #     #          #  #    #", 'red', attrs=['blink']),
      colored("\n   #      #     #      ######    ######          #  #       ########    #     #    #  #       #####      #   #   #", 'red', attrs=['blink']),
      colored("\n    #    # #   #       #               #         #  #       #    #     # ##### #   #  #       #          #    #  # ", 'red', attrs=['blink']),
      colored("\n     #  #   # #        #        #     ##         #    #     #     #    #       #   #    #     #          #     # #", 'red', attrs=['blink']),
      colored("\n      #      #         #         ######          #      #   #      #   #       #   #      #   ########   #       #", 'red', attrs=['blink']),
      colored("\n\n\n                    ⠀⠀⠀⠀⠀⠀ ⠀ ⠀⠀⠀⠀⠀  ⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⠀⠀⠀                           ", 'red', attrs=['blink']),
      colored("\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                     ⠀⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀                         ", 'red', attrs=['blink']),
      colored("\n                    ⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀                       ", 'red', attrs=['blink']),
      colored("\n                    ⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⡿⠿⢿⣿⣷⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⣷⣠⣴⣶⣶⣤⡀⠀            ", 'red', attrs=['blink']),
      colored("\n                    ⠀⠀⠀⠀⠀⠀⠀⠀⠻⢿⡄⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣿⣿⣟⠉⢹⣿⣷⠀⠀⠀          ", 'red', attrs=['blink']),
      colored("\n                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠿⠿⠿⠋⠀⠀⠀         ⠀", 'red', attrs=['blink']),
      colored("\n                    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠉⣿⣿⣧⠀                  ", 'red', attrs=['blink']),
      colored("\n                    ⠀⠀⠀⢀⣀⣀⠀⠀⠀⠀⠀⣰⣿⣿⡟⠁⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠈⢿⣿⣷⡄⠀               ", 'red', attrs=['blink']),
      colored("\n                    ⠀⣴⣾⣿⣿⣿⣿⣶⡀⢀⣾⣿⣿⠋⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠹⣿⣿⣦⠀              ", 'red', attrs=['blink']),
      colored("\n                    ⢸⣿⡁⠀⠀⢀⣿⣿⢇⣾⣿⣿⠃⠀⠀⠀⠀⠀⠀⣿⡈⠙⢿⣿⣿⣿⠿⠋⢩⡇⠀⠀⠀⠀⠀⠀⠙⣿⣿⣇⠀⠀⠀           ", 'red', attrs=['blink']),
      colored("\n                    ⠈⠛⠛⣠⣴⣿⡿⠋⢸⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⣿⣿⣶⣾⣿⣿⣿⣷⣶⣿⡇⠀⠀⠀⠀⠀⠀⠀⣻⣿⣿⠀             ", 'red', attrs=['blink']),
      colored("\n                    ⠀⣠⣾⣿⡿⠋⠀⠀⢻⣿⣿⣷⡀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⢠⣿⣿⣏⣠⣤⣶⣤⠀⠀     ⠀", 'red', attrs=['blink']),
      colored("\n                    ⢰⣿⣿⣟⠀⠀⠀⠀⠘⢿⣿⣿⣿⣷⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣤⣴⣿⣿⣿⣿⠋⠀⠀⠀⠀       ", 'red', attrs=['blink']),
      colored("\n                    ⢸⣿⣿⣿⣦⣄⣀⠀⠀⠀⠉⠙⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠛⠉⢻⣿⣄⠀⠀        ⠀", 'red', attrs=['blink']),
      colored("\n                    ⠀⠙⠿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠈⢿⣿⣶⣄⠀⠀⠀   ⠀⠀", 'red', attrs=['blink']),
      colored("\n                    ⠀⠀⠀⠀⠈⠉⠉⠙⠛⠛⠛⠛⠛⣿⣿⣿⣿⠟⢋⣿⣿⣿⡿⠋⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠙⢿⣿⣧⡀⠀      ", 'red', attrs=['blink']),
      colored("\n                     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⠟⠁⠀⣿⣿⣿⠟⠀⠀⢀⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠈⢿⣿⣷⠀⠀⠀    ", 'red', attrs=['blink']),
      colored("\n                     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⠏⠀⠀⢸⣿⣿⣿⠀⠀⠀⢸⣿⣿⣿⠀⠈⢻⣿⣿⣿⢿⣿⣿⣦⡀⠀⠀⠀⣸⣿⣿⠀⣀⡄    ", 'red', attrs=['blink']),
      colored("\n                    ⠀ ⠀⠀⠀⠀ ⠀⠀⠀⣰⣿⣿⡟⠀⠀⠀⠸⣿⣿⣿⠀⠀⠀⢻⣿⣿⣿⠀⠀⠀⢻⣿⣿⡆⠹⢿⣿⣿⣶⣶⣾⣿⣿⣿⣿⠋⠀     ", 'red', attrs=['blink']),
      colored("\n                    ⠀⠀⠀⠀⠀⠀ ⢀⣴⣿⣿⡿⠁⠀⠀⠀⠀⢿⣿⣿⡆⠀⠀⠸⣿⣿⣿⡄⠀⠀⠀⢿⣿⣿⠀⠀⠙⠛⠿⠿⠿⠛⠋⢸⣿⠀⠀     ", 'red', attrs=['blink']),
      colored("\n                    ⠀⠀⠀⠀⣠⣴⣿⣿⡿⠛⠁⠀⠀⠀⠀⠀⠘⣿⣿⣿⠀⠀⠀⣿⣿⣿⡇⠀⠀⠀⢸⣿⣿⡇⠀⠀⠀⠀⠀⠀ ⠀⠀⢸⣿⠀⠀     ", 'red', attrs=['blink']),
      colored("\n                     ⠀⢠⣶⣿⣿⠿⠋⠁⠒⠛⢻⣷⠀⠀⠀⠀⠀⢹⣿⣿⡇⠀⣠⣿⣿⣿⢃⣴⣿⠟⠛⢿⣿⣿⡄⠀⠀⠀⠀⠀⠀⢠⣿⣿⠀⠀    ", 'red', attrs=['blink']),
      colored("\n                   ⠀⠀⢰⣿⣿⠟⠁⠀⠀⠀⠀⢀⣾⡟⠀⠀⠀⠀⠀⠘⣿⣿⣧⣾⣿⣿⠟⠁⣾⣿⡇⠀⠀⠘⢿⣿⣿⣦⡀⠀⠀⣀⣴⣿⣿⠃⠀     ", 'red', attrs=['blink']),
      colored("\n                  ⠀ ⠀⣿⣿⡇⠀⠀⢀⡄⠀⢠⣿⣿⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠟⠁⠀⠀⢿⣿⣇⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⡿⠟⠁⠀⠀      ", 'red', attrs=['blink']),
      colored("\n                  ⠀⠀ ⠹⣿⣷⣄⣀⣼⡇⠀⢸⣿⣿⡀⠀⠀⠀⠀⣠⣿⣿⣿⡿⠋⠀⠀⠀⠀⢸⣿⣿⡀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀      ", 'red', attrs=['blink']),
      colored("\n                  ⠀⠀⠀ ⠈⠛⠛⠛⠋⠀⠀⠀⢻⣿⣿⣶⣶⣶⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀              ", 'red', attrs=['blink']),
      colored("\n                  ⠀ ⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠛⠛⠛⠉⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠀⠀⠀⠀⠀                   ", 'red', attrs=['blink']),
      colored("\n                   ⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠸⣿⣿⣷⣄⣀⠀⢀⣀⣴⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀      ⠀⠀⠀⠀", 'red', attrs=['blink']),
      colored("\n                  ⠀ ⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀  ⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀                 ⠀⠀⠀", 'red', attrs=['blink']),
      colored("\n⠀⠀⠀⠀⠀⠀⠀                      ⠀⠀⠀⠀⠀⠀⠀⠀⠀  ⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀      ⠀", 'red', attrs=['blink']),)
                
print(colored("\n####   WPS_CRACKER   ####", 'red'))
print(colored("Made by: Airil/Ainhoa/Ari (we are the same person)\n", 'cyan'))
print(colored("I am not responsible for the misuse that may be given to this tool!\n\n", 'red', attrs=['reverse', 'blink', 'dark', 'dark']))

time.sleep(1)
call("ifconfig", shell=True)

iitext = str(colored("[-]", 'yellow') + " Net Interface name: ")
iface = input(iitext)
ifconfig_result = subprocess.check_output(["ifconfig", iface])
macSearch = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", str(ifconfig_result))
if macSearch:
    realMac = macSearch.group(0)
    print(colored("[+]", 'green'), "Real MAC:", colored(str(realMac), 'cyan'))
        
def change_mac(iface, option):
    if option == "new":
        print("\n" + colored("[+]", 'green'), "Setting a new MAC...")
        chars = ["0","1", "2","3","4", "5","6", "7","8", "9","a","b","c","d","e","f"]
        newMAC = "00:"
        for i in range(4):
            for a in range(2):
                newMAC += chars[random.randint(0,15)]
            newMAC += ":"
        for a in range(2):
            newMAC += chars[random.randint(0,15)]
        print(colored("[+]", 'green'), "new temporal MAC:", colored(str(newMAC), 'cyan'))
        
        call(["ifconfig", iface, "down"], stdout=DN, stderr=DN)
        call(["ifconfig", iface, "hw", "ether", newMAC])
        call(["ifconfig", iface, "up"], stdout=DN, stderr=DN)
        
    else:
        print(colored("[+]", 'green'), "Setting old MAC...")
        call(["ifconfig", iface, "down"], stdout=DN, stderr=DN)
        call(["ifconfig", iface, "hw", "ether", realMac], stdout=DN, stderr=DN)
        call(["ifconfig", iface, "up"], stdout=DN, stderr=DN)

def enable_monitor_mode(iface):
    print("\n" + colored("[+]", 'green'), "Starting monitor mode...")
    change_mac(iface, "new")
    call(['airmon-ng', 'start', iface], stdout=DN, stderr=DN)
    call(['iw', 'reg', 'set', 'BO'], stdout=DN, stderr=DN)
        
def disable_monitor_mode(iface):
    print(colored("[+]", 'green'), "Disabling monitor mode...")
    call(['airmon-ng', 'stop', iface], stdout=DN, stderr=DN)
    call(["service", "network-manager", "start"], stdout=DN, stderr=DN)
    change_mac(iface, "old")

def checks():
    print("\n" + colored("[+]", 'green'), "Checking requeriments... ")
    if str(subprocess.check_output(["which", "aircrack-ng"])) != "":
        print(colored("[+]", 'green'), "Aircrack installed")
    else:
        print(colored("[+]", 'green'), "Instaling aircrack-ng...")
        call(["apt-get", "install", "aircrack-ng", "-Y"])
        print(colored("[+]", 'green'), "Aircrack installed")

def simpleWPSconect():
    print(colored("[+]", 'green'), "Trying to conect WPS...")
    #call(["wpa_cli", "wps_pbc"])
    return("uwu")
    ########## ahora hay que detectar si nos podemos conectar o no y printearlo
    ########## tambien hay que probar que el comando funcione, que no estoy muy segura

def brute_force_WPS():
    generic_pins = ("12345678", )
    for i in range(len(generic_pins)): #try generic pins
        call(["wpa_cli", "wps_pin", "any", generic_pins[i]])

    for i in range(0,11000): #brute force
        pass
        

if os.getuid() == 0 and os.uname()[0].startswith("Linux"):
    checks()
    
    while True:
        call(['airmon-ng', 'stop', iface], stdout=DN, stderr=DN)
        call(["service", "network-manager", "start"], stdout=DN, stderr=DN)
        time.sleep(3)
        
        print("\n")
        call(["nmcli", "device", "wifi", "list"])
        print("\n")
        
        enable_monitor_mode(iface)
        
        oitext = str(colored("[-]", 'yellow') + " What do yoy what do do " + colored("(attack, change_mac, exit, help): ", 'cyan'))
        option = input(oitext).lower()
        
        if option == "attack":
            titext = str(colored("[-]", 'yellow') + " Target BSSID: ")
            target = input(titext)
            
            o2itext = str(colored("[-]", 'yellow') + " Attack option " + colored("(pasive, active): ", 'cyan'))
            option2 = input(o2itext)
            
            if option2 == "pasive":
                print(colored("\n[+]", 'green'), "Starting pasive wps attack:")
                ptitext = str(colored("[-]", 'yellow') + " How many time do you want to stay waiting " + colored("(in minutes, for example: 10): ", 'cyan'))
                pasiveTime = int(input(ptitext))
                print(colored("[+]", 'green'), "Waiting for someone put the wps button...")
                t = int(pasiveTime/60)
                t2 = int(t/50)
                
                for i in range(t2):
                    tryToConect = simpleWPSconect()
                    if tryToConect == "uwu":
                        print("uwu")
                        break
                        continue
                    time.sleep(50)
                    
            
            elif option2 == "active":
                pass
            
            else:
                print(colored("\n[!] ERROR", 'red'), " something was wrong, please,", colored("try again", 'green'))
            
        elif option == "exit":
            break
        
        elif option == "change_mac":
            change_mac(iface, "new")
        
        elif option == "help":
            pass
        
        else:
            print(colored("\n[!] ERROR", 'red'), " something was wrong, please,", colored("try again", 'green'))
            
    disable_monitor_mode(iface)
    
else:
    if not os.uname()[0].startswith("Linux"):
        print(colored("[!]", 'red'), "This tool only work in linux")
    else:
        print("\n", colored("[!]", 'red'), "Login as Root and try again\n")
