# Made by: Airil / Ainhoa

import time
import random

import os
import re
import requests
import sys

import subprocess
from subprocess import call

from termcolor import colored
from pwn import *

from reconocimiento import *
from other_functions import *

print(colored("\n                                                           __====-_        _-====__", 'red', attrs=['blink']),
      colored("\n                                                       _--^^^#####//      \\#####^^^--_", 'red', attrs=['blink']),
      colored("\n                                                    _-^##########// (    ) \\##########^-_", 'red', attrs=['blink']),
      colored("\n                                                   -############//  |\^^/|  \\############-", 'red', attrs=['blink']),
      colored("\n                                                 _/############//   (@::@)   \\############\_", 'red', attrs=['blink']),
      colored("\n                                                ./#############((   \.\/./   ))#############\.", 'red', attrs=['blink']),
      colored("\n                                                -###############\\    (oo)    //###############-", 'red', attrs=['blink']),
      colored("\n                                                -#################\\  /  \  //#################-", 'red', attrs=['blink']),
      colored("\n                                              _#/|##########/\######(    )######/\##########|\#_", 'red', attrs=['blink']),
      colored("\n\n#########   #     #   #     #   #      #   #####    ######   ######         #####    ######     ####     ####     ####    #       #", 'red', attrs=['blink']),
      colored("\n    #       #     #   #     #   # #    #   #    #   #        #     #        #    #   #     #   #    #   #        #    #   # #     #", 'red', attrs=['blink']),
      colored("\n    #       #######   #     #   #   #  #   #    #   ###      ######         #    #   ######    ######   #   ###  #    #   #   #   #", 'red', attrs=['blink']),
      colored("\n    #       #     #   #     #   #    # #   #    #   #        #     #        #    #   #     #   #    #   #    #   #    #   #     # #", 'red', attrs=['blink']),
      colored("\n    #       #     #    #####    #      #   #####    ######   #     #        #####    #     #   #    #    ####     ####    #       #", 'red', attrs=['blink']))

print(colored("\n\n####   ThunderDragon   ####", 'red'))
print(colored("Made by: Airil\n", 'cyan'))
print(colored("I am not responsible for the misuse that may be given to this tool!\n\n", 'red', attrs=['reverse', 'blink', 'dark', 'dark']))

DN = open(os.devnull, 'w')

realMac = ""
net_interface = ""

try:
    if os.getuid() == 0:
        ###### CHECKS
        print("\n" + colored("[+]", 'green'), "Checking requeriments... ")
        if str(subprocess.check_output(["which", "searchsploit"])) != "":
            print(colored("[+]", 'green'), "Searchsploit installed")
            print(colored("[-] If you haven't updated Searchsploit recently, please run 'searchsploit -u' to update it.", 'yellow'))
        else:
            print(colored("[-] Instaling searchsploit...", 'yellow'))
            call(["sudo", "apt", "update", "&&", "sudo", "apt", "-y", "install", "exploitdb", "-Y"])
            print(colored("[+]", 'green'), "Searchsploit installed")
            
        if str(subprocess.check_output(["which", "whatweb"])) != "":
            print(colored("[+]", 'green'), "Whatweb installed")
        else:
            print(colored("[-] Instaling whatweb...", 'yellow'))
            call(["sudo", "apt-get", "install", "whatweb", "-Y"])
            print(colored("[+]", 'green'), "Whatweb installed")
            
        ###### EJECUCION
        while True:
            option = input(str(colored("\nThunderDragon", 'blue') + colored(" option > ", 'red'))).lower().strip()
            
            if option == "subdomains":
                domain = input(str(colored("\nThunderDragon", 'blue') + colored(" DOMAIN > ", 'red'))).strip()
                sslcert = input(str(colored("\nThunderDragon", 'blue') + colored(" Is https? [y/n] > ", 'red'))).strip()
                brute = input(str(colored("\nThunderDragon", 'blue') + colored(" Do you want to use Brute Force to try to find more? [y/n] > ", 'red'))).lower().strip()
                subdomainslist = subdomains(domain, brute, sslcert)
                
                if subdomainslist == []:
                    print(colored("\n[!] Subdomains not found!", 'red'))
                else:
                    print(colored("\n[+] Subdomains founded!\n", 'green'))
                    
                    print(colored("SUBDOMAINS\n", 'green', attrs=['dark', 'underline']))
                    for i in subdomainslist:
                        print(colored(i, 'blue'))
                        
            elif option == "directories":
                url = input(str(colored("\nThunderDragon", 'blue') + colored(" URL > ", 'red'))).strip()
                if "http://" not in url and "https://" not in url:
                    ssl = input(str(colored("\nThunderDragon", 'blue') + colored(" http or https? > ", 'red'))).strip()
                    url = ssl + "://" + url
                hidden_codes = input(str(colored("\nThunderDragon", 'blue') + colored(" HIDDEN RESPONSE CODES [example: 403 402 500] > ", 'red'))).strip()
                if hidden_codes != "":
                    hc = list(map(int, hidden_codes.split()))
                else:
                    hc = []
                
                directories = dir_fuzzing(url, hc)
                
                print(colored("\nDIRECTORIES:", 'green', attrs=['underline', 'dark']))
                for dir in directories:
                    print(colored(dir, 'cyan'))
            
            elif option == "port_scan":
                ip = input(str(colored("\nThunderDragon", 'blue') + colored(" IP > ", 'red'))).lower().strip()
                ports = input(str(colored("\nThunderDragon", 'blue') + colored(" Port range (example: 1 655536) (enter with nothing for scan all ports) > ", 'red'))).lower().strip()
                protocolo = input(str(colored("\nThunderDragon", 'blue') + colored(" Protocol [TCP/UDP] > ", 'red'))).lower().strip()
                valid_ports = port_scan(ip, ports, protocolo)
                
                print(colored("\nPORTS:", 'green', attrs=['underline', 'dark']))
                for port, service in valid_ports.items():
                    if service:
                        print(colored(str(port), 'cyan') + " " + service)
                    else:
                        print(colored(str(port), 'cyan'))
            
            elif option == "scan_localnet":
                active_hosts = scan_local_network(input(str(colored("\nThunderDragon", 'blue') + colored(" ip and cidr (example: 255.255.127.0/24) > ", 'red'))).strip())
                
                print(colored("\nActive Hosts\n", 'green', attrs=['dark', 'underline']))
                for host in active_hosts:
                    print(colored(host, 'blue'))
            
            elif option == "show_metadata":
                show_metadata(input(str(colored("\nThunderDragon", 'blue') + colored(" File Path > ", 'red'))).strip())
                
            elif option == "change_mac":
                call("ifconfig", shell=True)
                print("\n")
                net_interface = input(str(colored("\nThunderDragon", 'blue') + colored(" net interface > ", 'red'))).lower().strip()
                
                if realMac == "":
                    ifconfig_result = subprocess.check_output(["ifconfig", net_interface])
                    macSearch = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", str(ifconfig_result))
                    if macSearch:
                        realMac = macSearch.group(0)
                        print(colored("\n[+]", 'green'), "Real MAC:", colored(str(realMac), 'cyan'))

                change_mac(net_interface)
            
            elif option == "help":
                print(colored("\n\nHELP:", 'green', attrs=['underline', 'dark'])+
                      "\n· port_scan"+
                      "\n· scan_localnet"+
                      "\n· subdomains"+
                      "\n· fuzzing"+
                      "\n· show_metadata"+
                      "\n· change_mac"+
                      "\n· exit")
            
            elif option == "exit":
                if realMac != "":
                    print(colored("\n[+] Setting real MAC..."))
                    call(["ifconfig", net_interface, "down"], stdout=DN, stderr=DN)
                    call(["ifconfig", net_interface, "hw", "ether", realMac])
                    call(["ifconfig", net_interface, "up"], stdout=DN, stderr=DN)
                
                exit()
                              
    else:
        print("\n" + colored("[!] Login as Root ", 'red') + colored("and try again\n", 'yellow'))

except:
    print(colored("[!]", 'red') + colored(" This tool only work in Linux", 'red'))
