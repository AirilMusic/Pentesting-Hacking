# Made by: Airil / Ainhoa

import os
import re
import subprocess

from termcolor import colored
from reconocimiento import *
from other_functions import *
from automatic import *
from attacks import *
from dictionaries import *
from pwn import *

print(colored("\n                                                           __====-_        _-====__", 'red', attrs=['blink']),
      colored("\n                                                       _--^^^#####//      \\#####^^^--_", 'red', attrs=['blink']),
      colored("\n                                                    _-^##########// (    ) \\##########^-_", 'red', attrs=['blink']),
      colored("\n                                                   -############//  |\^^/|  \\############-", 'red', attrs=['blink']),
      colored("\n                                                 _/############//   (@::@)   \\############\_", 'red', attrs=['blink']),
      colored("\n                                                ./#############((   \.\/./   ))#############\.", 'red', attrs=['blink']),
      colored("\n                                                -###############\\    (oo)    //###############-", 'red', attrs=['blink']),
      colored("\n                                                -#################\\  /  \  //#################-", 'red', attrs=['blink']),
      colored("\n                                              _#/|##########/\######(    )######/\##########|\#_", 'red', attrs=['blink']),
      colored("\n\n#########   #     #   #     #   #      #   #####    ######   ######         #####    ######     ####     ####     ####    #       #", 'red', attrs=['blink']),
      colored("\n    #       #     #   #     #   # #    #   #    #   #        #     #        #    #   #     #   #    #   #        #    #   # #     #", 'red', attrs=['blink']),
      colored("\n    #       #######   #     #   #   #  #   #    #   ###      ######         #    #   ######    ######   #   ###  #    #   #   #   #", 'red', attrs=['blink']),
      colored("\n    #       #     #   #     #   #    # #   #    #   #        #     #        #    #   #     #   #    #   #    #   #    #   #     # #", 'red', attrs=['blink']),
      colored("\n    #       #     #    #####    #      #   #####    ######   #     #        #####    #     #   #    #    ####     ####    #       #", 'red', attrs=['blink']))

print(colored("\n\n####   ThunderDragon   ####", 'red'))
print(colored("Made by: Airil\n", 'cyan'))
print(colored("I am not responsible for the misuse that may be given to this tool!", 'red', attrs=['reverse', 'blink', 'dark', 'dark']))

#directory_map("http://10.10.10.233/", "100", "400", 0, None, "directory_list.txt")

# tambien hay que checkear el fuzzing que funciona mal




DN = open(os.devnull, 'w')

realMac = ""
current_mac = ""
net_interface = ""

try:    
    ###### EJECUCION
    while True:
        option = input(str(colored("\nThunderDragon", 'blue') + colored(" option > ", 'red'))).lower().strip()
        
        if option == "subdomains":
            domain = input(str(colored("\nThunderDragon", 'blue') + colored(" DOMAIN > ", 'red'))).strip()
            sslcert = input(str(colored("\nThunderDragon", 'blue') + colored(" Is https? [y/n] > ", 'red'))).strip()
            brute = input(str(colored("\nThunderDragon", 'blue') + colored(" Do you want to use Brute Force to try to find more? [y/n] > ", 'red'))).lower().strip()
            subdomainslist = subdomains(domain, brute, sslcert)
            
            if subdomainslist == []:
                print(colored("\n[!] Subdomains not found!", 'red'))
            else:
                print(colored("\n[+] Subdomains founded!\n", 'green'))
                
                print(colored("SUBDOMAINS\n", 'green', attrs=['dark', 'underline']))
                for i in subdomainslist:
                    print(colored(i, 'blue'))
                    
        elif option == "fuzzing":
            url = input(str(colored("\nThunderDragon", 'blue') + colored(" URL > ", 'red'))).strip()
            if "http://" not in url and "https://" not in url:
                ssl = input(str(colored("\nThunderDragon", 'blue') + colored(" http or https? > ", 'red'))).strip()
                url = ssl + "://" + url
            hidden_codes = input(str(colored("\nThunderDragon", 'blue') + colored(" HIDDEN RESPONSE CODES [example: 403 402 500] > ", 'red'))).strip()
            if hidden_codes != "":
                hc = list(map(int, hidden_codes.split()))
            else:
                hc = []
            
            directories = dir_fuzzing(url, hc)
            
            print(colored("\nDIRECTORIES:", 'green', attrs=['underline', 'dark']))
            for dir in directories:
                print(colored(dir, 'cyan'))
        
        elif option == "directory_map":
            url = input(str(colored("\nThunderDragon", 'blue') + colored(" URL > ", 'red'))).strip()
            if "http://" not in url and "https://" not in url:
                ssl = input(str(colored("\nThunderDragon", 'blue') + colored(" http or https? > ", 'red'))).strip()
                url = ssl + "://" + url
            hidden_codes = input(str(colored("\nThunderDragon", 'blue') + colored(" HIDDEN RESPONSE CODES [example: 403 402 500] > ", 'red'))).strip()
            if hidden_codes == None or hidden_codes == "":
                hidden_codes = "404"
            thread_number = input(str(colored("\nThunderDragon", 'blue') + colored(" THREAD NUMBER (default: 20) > ", 'red'))).strip()
            if thread_number == None or thread_number == "" or int(thread_number) <= 0:
                thread_number = "20"

            directory_map(url, thread_number, hidden_codes, 0, None, "directory_list.txt")
            
        elif option == "port_scan":
            ip = input(str(colored("\nThunderDragon", 'blue') + colored(" IP > ", 'red'))).lower().strip()
            ports = input(str(colored("\nThunderDragon", 'blue') + colored(" Port range (example: 1 655536) (enter with nothing for scan most common ports or all for scan all ports) > ", 'red'))).lower().strip()
            protocolo = input(str(colored("\nThunderDragon", 'blue') + colored(" Protocol [TCP/UDP] > ", 'red'))).lower().strip()
            valid_ports = port_scan(ip, ports, protocolo)
            
            print(colored("\nPORTS:", 'green', attrs=['underline', 'dark']))
            for port, service in valid_ports.items():
                if service == "uwu":
                    service = ""
                if service:
                    print(colored(str(port), 'cyan') + " " + service)
                else:
                    print(colored(str(port), 'cyan'))
        
        elif option == "scan_localnet":
            net_info()
            active_hosts = scan_local_network(input(str(colored("\nThunderDragon", 'blue') + colored(" ip and cidr (example: 255.255.127.0/24) > ", 'red'))).strip())
            
            print(colored("\nActive Hosts\n", 'green', attrs=['dark', 'underline']))
            for host in active_hosts:
                print(colored(host, 'blue'))
        
        elif option == "show_metadata":
            show_metadata(input(str(colored("\nThunderDragon", 'blue') + colored(" File Path > ", 'red'))).strip())
            
        elif option == "change_mac":
            current_mac = input(str(colored("\nThunderDragon", 'blue') + colored(" NEW MAC > ", 'red')))
        
        elif option == "whois":
            domain = input(str(colored("\nThunderDragon", 'blue') + colored(" DOMAIN > ", 'red'))).lower().strip()
            get_whois_info(domain)
            
        elif option == "tec_enum":
            domain = input(str(colored("\nThunderDragon", 'blue') + colored(" DOMAIN > ", 'red'))).lower().strip()
            tec_enum(domain)
        
        elif option == "encoder":
            encoder()
            
        elif option == "decoder":
            decoder()
            
        elif option == "auto_recognition":
            host, ports, protocol, brute, sslcert, url, hc = "", "", "", "", "", "", []
            whois_ = input(str(colored("\nThunderDragon", 'blue') + colored(" WANT TO VIEW INFORMATION ABOUT THE TARGET [y/n] > ", 'red'))).lower().strip()
            domain = input(str(colored("\nThunderDragon", 'blue') + colored(" DOMAIN > ", 'red'))).lower().strip()
            tec_enumeration = input(str(colored("\nThunderDragon", 'blue') + colored(" WANT TO ENUMERATE WEB TECNOLOGIES [y/n] > ", 'red'))).lower().strip()
            port_enum = input(str(colored("\nThunderDragon", 'blue') + colored(" WANT TO ENUMERATE PORTS [y/n] > ", 'red'))).lower().strip()
            host = ""
            if port_enum == "y":
                host = input(str(colored("\nThunderDragon", 'blue') + colored(" TARGET IP > ", 'red'))).lower().strip()
                ports = input(str(colored("\nThunderDragon", 'blue') + colored(" Port range (example: 1 655536) (enter with nothing for scan most common ports or all for scan all ports) > ", 'red'))).lower().strip()
                protocol = input(str(colored("\nThunderDragon", 'blue') + colored(" PROTOCOL [TCP/UDP] > ", 'red'))).lower().strip()
            subdomain = input(str(colored("\nThunderDragon", 'blue') + colored(" WANT TO ENUMERATE SUBDOMAINS [y/n] > ", 'red'))).lower().strip()
            directories = input(str(colored("\nThunderDragon", 'blue') + colored(" WANT TO ENUMERATE DIRECTORIES [y/n] > ", 'red'))).lower().strip()
            if subdomain == "y" or directories == "y":
                brute = input(str(colored("\nThunderDragon", 'blue') + colored(" WANT TO USE BRUTE FORCE [y/n] > ", 'red'))).lower().strip()
                sslcert = input(str(colored("\nThunderDragon", 'blue') + colored(" http or https? > ", 'red'))).strip()
            if directories == "y":
                hidden_codes = input(str(colored("\nThunderDragon", 'blue') + colored(" HIDDEN RESPONSE CODES [example: 403 402 500] > ", 'red'))).strip()
                if hidden_codes != "":
                    hc = list(map(int, hidden_codes.split()))
                else:
                    hc = []
                url = input(str(colored("\nThunderDragon", 'blue') + colored(" URL > ", 'red'))).strip()
                if "http://" not in url and "https://" not in url:
                    url = sslcert + "://" + url
            webdav = input(str(colored("\nThunderDragon", 'blue') + colored(" WANT TO ENUMERATE WEBDAV (if it exist) [y/n] > ", 'red'))).lower().strip()

            auto_recognition(whois_, domain, tec_enumeration, port_enum, host, ports, protocol, subdomain, brute, sslcert, directories, url, hc, webdav)
        
        elif option == "ip_lookup":
            ip_v = input(str(colored("\nThunderDragon", 'blue') + colored(" IP > ", 'red'))).strip()
            ip_lookup(ip_v)

        elif option == "webdav_enum":
            target_url = input(str(colored("\nThunderDragon", 'blue') + colored(" URL > ", 'red'))).strip()
            depth = input(str(colored("\nThunderDragon", 'blue') + colored(" Enumeration depth (1 for current, 'infinity' for everything) > ", 'red'))).strip()
            user = input(str(colored("\nThunderDragon", 'blue') + colored(" USERNAME (if there isn't, don't put nothing) > ", 'red'))).strip()
            pwd = input(str(colored("\nThunderDragon", 'blue') + colored(" PASSWORD (if there isn't, don't put nothing) > ", 'red'))).strip()
            
            if depth.lower() != "infinity":
                try:
                    depth = int(depth)
                except ValueError:
                    depth = 1
            else:
                depth = "infinity"

            if not user:
                user = None
            if not pwd:
                pwd = None

            webdav_enum(target_url, depth, user, pwd)

        elif option == "xss_scripts":
            xss_scripts()
        
        elif option == "shellshock":
            url = input(str(colored("\nThunderDragon", 'blue') + colored(" Vulnerable file URL (.../cgi-bin/file) > ", 'red'))).strip()
            proxy = input(str(colored("\nThunderDragon", 'blue') + colored(" Proxy URL (if there isn't, don't put nothing) > ", 'red'))).strip()
            if proxy == "":
                proxy = None
            lhost = input(str(colored("\nThunderDragon", 'blue') + colored(" YOUR IP > ", 'red'))).strip()

            exploit_shellshock(url, proxy, lhost)

        elif option == "web_words":
            url = input(str(colored("\nThunderDragon", 'blue') + colored(" URL > ", 'red'))).strip()
            web_words_dict(url)
        
        elif option == "help":
            print(colored("\nENUMERATION:", 'green', attrs=['underline', 'dark'])+
                    "\n· whois"+
                    "\n· port_scan"+
                    "\n· scan_localnet"+
                    "\n· subdomains"+
                    "\n· fuzzing"+
                    "\n· directory_map"+
                    "\n· tec_enum"+
                    "\n· webdav_enum"+
                    "\n· show_metadata"+
                    "\n· ip_lookup"+
                    colored("\n\nATTACK:", 'green', attrs=['dark', 'underline'])+
                    "\n· shellshock"+
                    "\n· xss_scripts"+
                    colored("\n\nAUTOMATIC:", 'green', attrs=['dark', 'underline'])+
                    "\n· auto_recognition"+
                    colored("\n\nOTHER FUNCTIONS:", 'green', attrs=['dark', 'underline'])+
                    "\n· encoder"+
                    "\n· decoder"+
                    "\n· change_mac"+
                    "\n· exit"+
                    colored("\n\nDICTIONARIES:", 'green', attrs=['dark', 'underline'])+
                    "\n· web_words")
        
        elif option == "exit":
            exit()
            
        elif option == "clear":
            clear()                

except Exception as e:
    print("Error:", e)
