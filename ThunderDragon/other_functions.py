# Made by: Airil / Ainhoa

import subprocess
import os
import platform
import datetime
from termcolor import colored
import base64
import hashlib
import json
import urllib.parse
import jwt

from termcolor import colored
from pwn import *

def exit():
    print(colored("\n[!] Shuting Down...", 'red'))
    subprocess.check_output("kill main.py")

def get_image_resolution(file_path):
    try:
        import PIL.Image
        with PIL.Image.open(file_path) as img:
            return img.size
    except ImportError:
        print(colored("\n[!] PIL module not found. Unable to get image resolution.", 'yellow'))
    except Exception as e:
        print(colored(f"\n[!] Failed to get image resolution: {str(e)}", 'red'))

def show_metadata(file_path):
    try:
        file_name = os.path.basename(file_path)
        directory = os.path.dirname(file_path)
        file_type = os.path.splitext(file_name)[1][1:]
        file_creation_time = datetime.datetime.fromtimestamp(os.path.getctime(file_path))
        file_modification_time = datetime.datetime.fromtimestamp(os.path.getmtime(file_path))
        output = subprocess.check_output(['ls', '-l', file_path], universal_newlines=True)
        lines = output.strip().split('\n')
        first_line = lines[0]
        size = first_line.split()[4]
        permissions = first_line.split()[0]
        creator = platform.node()

        print(colored("\nFILE METADATA:", attrs=('dark', 'underline')),
              f"\nName: {file_name}",
              f"\nDirectory: {directory}",
              f"\nFile type: {file_type}",
              f"\nFile size: {size} bytes",
              f"\n\nFile creation date: {file_creation_time}",
              f"\nFile modification date: {file_modification_time}",
              f"\n\nPermissions: {permissions}",
              f"\nCreator: {creator}")

        if file_type.lower() in ('jpg', 'jpeg', 'png', 'gif'):
            resolution = get_image_resolution(file_path)
            if resolution:
                print(f"\nResolution: {resolution[0]}x{resolution[1]}")

    except FileNotFoundError:
        print(colored("\n[!] File not found.", 'red'))
    except Exception as e:
        print(colored(f"\n[!] Failed opening file: {str(e)}", 'red'))
        
def encoder():
    text = input(str(colored("\nThunderDragon", 'blue') + colored(" TEXT > ", 'red'))).lower().strip()
    algorithm = input(str(colored("\nThunderDragon", 'blue') + colored(" ALGORITHM > ", 'red'))).lower().strip()

    if algorithm == "base64" or algorithm == "base 64":
        encoded_text = base64.b64encode(text.encode("utf-8")).decode("utf-8")
        print(encoded_text)
    
    elif algorithm == "binary" or algorithm == "binario":
        encoded_text = ' '.join(format(ord(char), '08b') for char in text)
        print(encoded_text)
    
    elif algorithm == "hexadecimal" or algorithm == "hex":
        encoded_text = ' '.join(format(ord(char), '02x') for char in text)
        print(encoded_text)
    
    elif algorithm == "url" or algorithm == "url encode":
        encoded_text = urllib.parse.quote(text)
        print(encoded_text)
    
    elif algorithm == "md5":
        encoded_text = hashlib.md5(text.encode("utf-8")).hexdigest()
        print(encoded_text)
    
    elif algorithm == "jwt" or algorithm == "json web token":
        secret_key = input(str(colored("\nThunderDragon", 'blue') + colored(" SECRET KEY > ", 'red')))
        encoded_text = jwt.encode({"text": text}, secret_key, algorithm="HS256")
        print(encoded_text)
        
def decoder():
    text = input(str(colored("\nThunderDragon", 'blue') + colored(" TEXT > ", 'red'))).lower().strip()
    algorithm = input(str(colored("\nThunderDragon", 'blue') + colored(" ALGORITHM > ", 'red'))).lower().strip()

    if algorithm == "base64" or algorithm == "base 64":
        decoded_text = base64.b64decode(text).decode("utf-8")
        print(decoded_text)
    
    elif algorithm == "binary" or algorithm == "binario":
        decoded_text = ''.join(chr(int(binary, 2)) for binary in text.split())
        print(decoded_text)
    
    elif algorithm == "hexadecimal" or algorithm == "hex":
        decoded_text = ''.join(chr(int(hexadecimal, 16)) for hexadecimal in text.split())
        print(decoded_text)
    
    elif algorithm == "url" or algorithm == "url decode":
        decoded_text = urllib.parse.unquote(text)
        print(decoded_text)
    
    elif algorithm == "md5":
        print("MD5 decoding is not possible. MD5 is a one-way hash function.")
    
    elif algorithm == "jwt" or algorithm == "json web token":
        secret_key = input(str(colored("\nThunderDragon", 'blue') + colored(" SECRET KEY > ", 'red')))
        try:
            decoded_payload = jwt.decode(text, secret_key, algorithms=["HS256"])
            decoded_text = decoded_payload["text"]
            print(decoded_text)
        except jwt.InvalidSignatureError:
            print("Invalid JWT signature.")
        except jwt.DecodeError:
            print("Error decoding JWT.")
        except Exception as e:
            print("An error occurred:", str(e))
