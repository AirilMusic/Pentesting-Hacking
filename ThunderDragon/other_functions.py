# Made by: Airil / Ainhoa

import subprocess
import os
import platform
import datetime
from termcolor import colored

from termcolor import colored

def exit():
    print(colored("\n[!] Shuting Down...", 'red'))
    subprocess.check_output("kill main.py")

def get_image_resolution(file_path):
    try:
        import PIL.Image
        with PIL.Image.open(file_path) as img:
            return img.size
    except ImportError:
        print(colored("\n[!] PIL module not found. Unable to get image resolution.", 'yellow'))
    except Exception as e:
        print(colored(f"\n[!] Failed to get image resolution: {str(e)}", 'red'))

def show_metadata(file_path):
    try:
        file_name = os.path.basename(file_path)
        directory = os.path.dirname(file_path)
        file_type = os.path.splitext(file_name)[1][1:]
        file_creation_time = datetime.datetime.fromtimestamp(os.path.getctime(file_path))
        file_modification_time = datetime.datetime.fromtimestamp(os.path.getmtime(file_path))
        output = subprocess.check_output(['ls', '-l', file_path], universal_newlines=True)
        lines = output.strip().split('\n')
        first_line = lines[0]
        permissions = first_line.split()[0]
        creator = platform.node()

        print(colored("\nFILE METADATA:", attrs=('dark', 'underline')))
        print(f"Name: {file_name}")
        print(f"Directory: {directory}")
        print(f"File type: {file_type}")
        print(f"\nFile creation date: {file_creation_time}")
        print(f"File modification date: {file_modification_time}")
        print(f"\nPermissions: {permissions}")
        print(f"Creator: {creator}")

        if file_type.lower() in ('jpg', 'jpeg', 'png', 'gif'):
            resolution = get_image_resolution(file_path)
            if resolution:
                print(f"\nResolution: {resolution[0]}x{resolution[1]}")

    except FileNotFoundError:
        print(colored("\n[!] File not found.", 'red'))
    except Exception as e:
        print(colored(f"\n[!] Failed opening file: {str(e)}", 'red'))

        
def edit_metadata():
    pass