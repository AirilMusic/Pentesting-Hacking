# Made by: Airil / Ainhoa

import re
import os
import requests
import subprocess

from termcolor import colored

def subdomains(domain):
    subdomains = []
    # Abusando de la transparencia del ssl
    print(colored("[+] Searching for subdomains by leveraging SSL transparency (pasive method)...", 'green'))
    target = re.sub('.*www\.', '', domain, 1).split('/')[0].strip()
    req = requests.get("https://crt.sh/?q=%.{d}&output=json".format(d=target))

    if req.status_code != 200:
        return subdomains

    for (key, value) in enumerate(req.json()):
        subdomains.append(value['name_value'])
    
    # Con OSINT
    print(colored("[+] Searching for more subdomains with OSINT (pasive method)...", 'green'))
    
    # Falta por hacer esto, que pereza
    
    # Domain Zone Transfer
    print(colored("[+] Searching for more subdomains with Domain Zone Trasfere (active method)...", 'green'))

    ping_process = subprocess.Popen(['ping', '-c', '1', domain], stdout=subprocess.PIPE)
    output, _ = ping_process.communicate()

    ip_pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
    match = ip_pattern.search(output.decode('utf-8'))
    
    ip = match.group(1)
    
    dig_process = subprocess.Popen(['dig', ip, 'axfr'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = dig_process.communicate()

    if b"; Transfer failed." in output:
        print(colored("[!] Domain Zone Trasfer failed!", 'red'))
    else:
        subdomain_pattern = re.compile(r'\b(?:[a-zA-Z0-9-]+\.)+' + re.escape(ip) + r'\b')
        subdomains.extend(subdomain_pattern.findall(output.decode('utf-8')))
    
    # Bruteforce
    inp = input(str(colored("[-] ", 'yellow') + colored(f"{len(sorted(set(subdomains)))} subdomains founded! ", 'blue') + colored("Do you want to use Brute Force to try to find more? [y/n] " , 'yellow') + colored("> ", 'red'))).lower()

    if inp == 'y':
        dictionary_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'subdomain_wordlist.txt')
        with open(dictionary_file) as f:
            dictionary = f.read().splitlines()
        
        for subdomain in dictionary:
            brute_force_subdomain = subdomain + '.' + domain
            response = requests.get('http://' + brute_force_subdomain)
            if response.status_code == 200:
                print(colored("[+] Found subdomain:", 'green'), brute_force_subdomain)
                subdomains.append(brute_force_subdomain)

    subdomains = sorted(set(subdomains))
    return subdomains
